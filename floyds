#include<stdio.h>
#include<time.h>
int min(int a, int b) { return (a < b) ? a : b; }
int main() {
 int n, i, j, k, W[10][10], D[10][10];
 clock_t start = clock();
 printf("Enter number of vertices: ");
 scanf("%d", &n);
 printf("Enter the cost matrix:\n");
 for(i = 0; i < n; i++)
 for(j = 0; j < n; j++)
 scanf("%d", &W[i][j]);
 // Floyd-Warshall Algorithm
 for(i = 0; i < n; i++)
 for(j = 0; j < n; j++)
 D[i][j] = W[i][j];
 for(k = 0; k < n; k++)
 for(i = 0; i < n; i++)
 for(j = 0; j < n; j++)
 D[i][j] = min(D[i][j], D[i][k] + D[k][j]);
 printf("Shortest path matrix:\n");
 for(i = 0; i < n; i++) {
 for(j = 0; j < n; j++)
 printf("%d ", D[i][j]);
 printf("\n");
 }
 printf("Runtime: %f seconds\n", (double)(clock() - start) / 
CLOCKS_PER_SEC);
 return 0;
}
Expected output:
Enter no of vertices : 4
Enter the cost matrix
0 999 3 999
2 0 999 999
999 7 0 1
6 999 999 0
All pairs shortest path matrix is:
0 10 3 4
2 0 5 6
7 7 0 1
6 16 9 0
The time taken is 0.989011
