#include <stdio.h>
#include <stdlib.h>

#define MAX_N 10 


void printBoard(int board[MAX_N][MAX_N], int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]); 
        }
        printf("\n");
    }
    printf("\n");
}


int isSafe(int board[MAX_N][MAX_N], int row, int col, int N) {
    for (int i = 0; i < col; i++) {
        if (board[row][i]) return 0; 
    }
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j]) return 0;
    }
    for (int i = row, j = col; j >= 0 && i < N; i++, j--) {
        if (board[i][j]) return 0; 
    }
    return 1;
}


void solveNQueensUtil(int board[MAX_N][MAX_N], int col, int N) {
    if (col == N) {
        printBoard(board, N); 
        return;
    }

    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col, N)) {
            board[i][col] = 1; 
            solveNQueensUtil(board, col + 1, N); 
            board[i][col] = 0; 
        }
    }
}


void solveNQueens(int N) {
    int board[MAX_N][MAX_N] = {0}; 
    solveNQueensUtil(board, 0, N);
}

int main() {
    int N;

  
    printf("Enter the number of queens (N): ");
    scanf("%d", &N);

   
    if (N <= 0 || N > MAX_N) {
        printf("Please enter a valid number of queens (1 to %d).\n", MAX_N);
        return 1;
    }

    
    printf("Solutions for %d queens:\n", N);
    solveNQueens(N);

    return 0;
}
