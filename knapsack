#include <stdio.h>
#include <time.h>


int knapsack(int W, int weights[], int values[], int n) {
    int K[n + 1][W + 1];

   
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            if (i == 0 || w == 0) {
                K[i][w] = 0;
            } else if (weights[i - 1] <= w) {
                K[i][w] = (values[i - 1] > K[i - 1][w]) ?
                           values[i - 1] + K[i - 1][w - weights[i - 1]] :
                           K[i - 1][w];
            } else {
                K[i][w] = K[i - 1][w];
            }
        }
    }

   
    printf("The table for solving knapsack problem is:\n");
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {
            printf("%d\t", K[i][w]);
        }
        printf("\n");
    }

    return K[n][W]; 
}

int main() {
    int n, W;

   
    printf("Enter the number of items: ");
    scanf("%d", &n);

    int weights[n], values[n];

   
    printf("Enter the weights of %d items:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &weights[i]);
    }

   
    printf("Enter the values of %d items:\n", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &values[i]);
    }

   
    printf("Enter the capacity of the knapsack: ");
    scanf("%d", &W);

  
    clock_t start = clock();
    int max_value = knapsack(W, weights, values, n);
    clock_t end = clock();

   
    printf("Optimal solution for the knapsack problem is %d\n", max_value);
    printf("The time taken is %f seconds\n", (double)(end - start) / CLOCKS_PER_SEC);

    return 0;
}
